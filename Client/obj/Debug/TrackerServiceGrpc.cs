// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: TrackerService.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace MyTorrent {
  public static partial class TrackerService
  {
    static readonly string __ServiceName = "MyTorrent.TrackerService";

    static readonly grpc::Marshaller<global::MyTorrent.NetworkInfoRequest> __Marshaller_MyTorrent_NetworkInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MyTorrent.NetworkInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MyTorrent.NetworkInfoResponse> __Marshaller_MyTorrent_NetworkInfoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MyTorrent.NetworkInfoResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MyTorrent.UploadStatusRequest> __Marshaller_MyTorrent_UploadStatusRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MyTorrent.UploadStatusRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MyTorrent.UploadStatusResponse> __Marshaller_MyTorrent_UploadStatusResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MyTorrent.UploadStatusResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MyTorrent.FileUploadInitiationRequest> __Marshaller_MyTorrent_FileUploadInitiationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MyTorrent.FileUploadInitiationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MyTorrent.FileUploadInitiationResponse> __Marshaller_MyTorrent_FileUploadInitiationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MyTorrent.FileUploadInitiationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MyTorrent.FileFragment> __Marshaller_MyTorrent_FileFragment = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MyTorrent.FileFragment.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MyTorrent.FileUploadResponse> __Marshaller_MyTorrent_FileUploadResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MyTorrent.FileUploadResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::MyTorrent.NetworkInfoRequest, global::MyTorrent.NetworkInfoResponse> __Method_GetNetworkInfo = new grpc::Method<global::MyTorrent.NetworkInfoRequest, global::MyTorrent.NetworkInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNetworkInfo",
        __Marshaller_MyTorrent_NetworkInfoRequest,
        __Marshaller_MyTorrent_NetworkInfoResponse);

    static readonly grpc::Method<global::MyTorrent.UploadStatusRequest, global::MyTorrent.UploadStatusResponse> __Method_GetUploadStatus = new grpc::Method<global::MyTorrent.UploadStatusRequest, global::MyTorrent.UploadStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUploadStatus",
        __Marshaller_MyTorrent_UploadStatusRequest,
        __Marshaller_MyTorrent_UploadStatusResponse);

    static readonly grpc::Method<global::MyTorrent.FileUploadInitiationRequest, global::MyTorrent.FileUploadInitiationResponse> __Method_InitiateUpload = new grpc::Method<global::MyTorrent.FileUploadInitiationRequest, global::MyTorrent.FileUploadInitiationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InitiateUpload",
        __Marshaller_MyTorrent_FileUploadInitiationRequest,
        __Marshaller_MyTorrent_FileUploadInitiationResponse);

    static readonly grpc::Method<global::MyTorrent.FileFragment, global::MyTorrent.FileUploadResponse> __Method_UploadFileFragments = new grpc::Method<global::MyTorrent.FileFragment, global::MyTorrent.FileUploadResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "UploadFileFragments",
        __Marshaller_MyTorrent_FileFragment,
        __Marshaller_MyTorrent_FileUploadResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::MyTorrent.TrackerServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TrackerService</summary>
    [grpc::BindServiceMethod(typeof(TrackerService), "BindService")]
    public abstract partial class TrackerServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::MyTorrent.NetworkInfoResponse> GetNetworkInfo(global::MyTorrent.NetworkInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::MyTorrent.UploadStatusResponse> GetUploadStatus(global::MyTorrent.UploadStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::MyTorrent.FileUploadInitiationResponse> InitiateUpload(global::MyTorrent.FileUploadInitiationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::MyTorrent.FileUploadResponse> UploadFileFragments(grpc::IAsyncStreamReader<global::MyTorrent.FileFragment> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TrackerService</summary>
    public partial class TrackerServiceClient : grpc::ClientBase<TrackerServiceClient>
    {
      /// <summary>Creates a new client for TrackerService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TrackerServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TrackerService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TrackerServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TrackerServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TrackerServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::MyTorrent.NetworkInfoResponse GetNetworkInfo(global::MyTorrent.NetworkInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNetworkInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::MyTorrent.NetworkInfoResponse GetNetworkInfo(global::MyTorrent.NetworkInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNetworkInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::MyTorrent.NetworkInfoResponse> GetNetworkInfoAsync(global::MyTorrent.NetworkInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNetworkInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::MyTorrent.NetworkInfoResponse> GetNetworkInfoAsync(global::MyTorrent.NetworkInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNetworkInfo, null, options, request);
      }
      public virtual global::MyTorrent.UploadStatusResponse GetUploadStatus(global::MyTorrent.UploadStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUploadStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::MyTorrent.UploadStatusResponse GetUploadStatus(global::MyTorrent.UploadStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUploadStatus, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::MyTorrent.UploadStatusResponse> GetUploadStatusAsync(global::MyTorrent.UploadStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUploadStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::MyTorrent.UploadStatusResponse> GetUploadStatusAsync(global::MyTorrent.UploadStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUploadStatus, null, options, request);
      }
      public virtual global::MyTorrent.FileUploadInitiationResponse InitiateUpload(global::MyTorrent.FileUploadInitiationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitiateUpload(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::MyTorrent.FileUploadInitiationResponse InitiateUpload(global::MyTorrent.FileUploadInitiationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InitiateUpload, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::MyTorrent.FileUploadInitiationResponse> InitiateUploadAsync(global::MyTorrent.FileUploadInitiationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitiateUploadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::MyTorrent.FileUploadInitiationResponse> InitiateUploadAsync(global::MyTorrent.FileUploadInitiationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InitiateUpload, null, options, request);
      }
      public virtual grpc::AsyncClientStreamingCall<global::MyTorrent.FileFragment, global::MyTorrent.FileUploadResponse> UploadFileFragments(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UploadFileFragments(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::MyTorrent.FileFragment, global::MyTorrent.FileUploadResponse> UploadFileFragments(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_UploadFileFragments, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TrackerServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TrackerServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TrackerServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetNetworkInfo, serviceImpl.GetNetworkInfo)
          .AddMethod(__Method_GetUploadStatus, serviceImpl.GetUploadStatus)
          .AddMethod(__Method_InitiateUpload, serviceImpl.InitiateUpload)
          .AddMethod(__Method_UploadFileFragments, serviceImpl.UploadFileFragments).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TrackerServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetNetworkInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MyTorrent.NetworkInfoRequest, global::MyTorrent.NetworkInfoResponse>(serviceImpl.GetNetworkInfo));
      serviceBinder.AddMethod(__Method_GetUploadStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MyTorrent.UploadStatusRequest, global::MyTorrent.UploadStatusResponse>(serviceImpl.GetUploadStatus));
      serviceBinder.AddMethod(__Method_InitiateUpload, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::MyTorrent.FileUploadInitiationRequest, global::MyTorrent.FileUploadInitiationResponse>(serviceImpl.InitiateUpload));
      serviceBinder.AddMethod(__Method_UploadFileFragments, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::MyTorrent.FileFragment, global::MyTorrent.FileUploadResponse>(serviceImpl.UploadFileFragments));
    }

  }
}
#endregion
